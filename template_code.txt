#include "DSP_Config.h"
#include <stdio.h> 
#include "fft.h" #include "gmm.h" 
#include "libmfcc.h" 
#include <math.h>

//#define PI 3.141592
#define BUFFERSIZE 256 
int M= BUFFERSIZE;
int kk = 0;
int startflag = 0;

int training = 1;
short X[BUFFERSIZE];
COMPLEX w[BUFFERSIZE];
COMPLEX B[BUFFERSIZE];
float feature;
float denominator = 0; 
float numerator = 0; 
float magnitude = 0; 
float avg = 0;
int coeff=0;
double spectrum[BUFFERSIZE]; 
double mfcc_result[13]={0}; 
float llh;
GMM gmm[1]; // create GMM model

int main() {
	int K = 3; // Number of Classes 
	int N = 1; // Number of Blocks 
	int D = 13; // Number of Features
	DSP_Init();
	int ii, mm, bb, ll;
	
  	// Initialize GMM model
	gmm_new(gmm, K, D, "diagonal");
	gmm_set_convergence_tol(gmm, 1e-6);
	gmm_set_regularization_value(gmm, 1e-6);
	gmm_set_initialization_method(gmm, "random");
	// (P3). Update GMM parameters (gmm[0]) through UART communication with Matlab
  	
  	// Twiddle factor
	for(ii=0; ii<M; ii++){
		w[ii].real = cos((float)ii/(float)M*PI); w[ii].imag = sin((float)ii/(float)M*PI);
	}
	
	// main stalls here, interrupts drive operation
	while(1) { 
		if(startflag){
			 // Remove bias (DC offset)
			avg = 0;
			for(mm=0; mm<M; mm++){
				avg = avg + X[mm];
			}
		
			// Measure the Magnitude of the input to find starting point
			avg = avg/M;
			magnitude = 0;

			for(mm=0; mm<M; mm++){
				magnitude = magnitude + abs(X[mm]-avg);
			}

			if(magnitude>30000){ // N-blocks
				for(bb=0;bb<N;bb++){ 
					for(ll=0; ll<M; ll++){
						B[ll].real = X[ll];
						B[ll].imag = 0;
					}
				// (P3). FFT: B is input and output, w is twiddle factors
				// (P3). Find 13 MFCC coefficients
				}
		
			// (P3). Print GMM score using gmm model and mfcc_result
			}
			startflag = 0;
		}
	}
}

#include "DSP_Config.h"
// Data is received as 2 16-bit words (left/right) packed into one
// 32-bit word. The union allows the data to be accessed as a single // entity when transferring to and from the serial port, but still be // able to manipulate the left and right channels independently.
#define LEFT 0 
#define RIGHT 1
volatile union { 
	Uint32 UINT;
    Int16 Channel[2];
} CodecDataIn, CodecDataOut;

struct cmpx {
	float real;
	float imag; 
	};
typedef struct cmpx COMPLEX;

//complex data structure used by FFT
extern int startflag;
extern int kk;
extern int M;
extern short X[M];
interrupt void Codec_ISR() 
{
	if(CheckForOverrun()) // overrun error occurred (i.e. halted DSP)
		return; // so serial port is reset to recover
	
	CodecDataIn.UINT = ReadCodecData(); // get input data samples
	
	if(kk>M-1){
		// P3 initialize index kk
		// P3 Change startflag to start processing in while loop in main()
	}
	
	if(!startflag){
		// P3 Put a new data to the buffer X
		// P3 Update index kk
	}
	WriteCodecData(CodecDataIn.UINT); // send output data to  port
}