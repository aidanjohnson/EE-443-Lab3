#include "DSP_Config.h"
#include <stdio.h>
#include "fft.h"
#include "svm.h"
#include "libmfcc.h"
#include <math.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <errno.h>
#define Malloc(type,n) (type *)malloc((n)*sizeof(type))

//#define PI 3.141592
#define BUFFERSIZE 256
int M=BUFFERSIZE;
#define NUMFILTERS 48

#define CLASSES 3
int K = CLASSES;  // Number of Classes
#define BLOCKS 1
int N = BLOCKS;  // Number of Blocks
#define FEATURES 13
int D = FEATURES;  // Number of Features

int kk=0;
int startflag = 0;
int training = 1;

short X[BUFFERSIZE];
COMPLEX w[BUFFERSIZE];
COMPLEX B[BUFFERSIZE];
float feature;
float denominator = 0;
float numerator = 0;
float magnitude = 0;
float avg = 0;

int coeff=0;
double spectrum[BUFFERSIZE];
double mfcc_result[FEATURES]={0};

//// SVM parameters
//struct svm_parameter param;		// set by parse_command_line
//struct svm_problem prob;		// set by read_problem
//struct svm_model *model;        // SVM model for training and classifications
//struct svm_node *x_space;
//int cross_validation = 0;
//int nr_fold;

void twiddleFactors();
//void initialization();
//void read_problem(double *featureVector, int *label,int N, int D);
//void do_cross_validation();
double read_predict(double *x);

// Predict
//int predict_probability=0;
struct svm_node x[FEATURES];
//void predict(double *featureVector);

// class, rho[3], nSV[3], sv_coef[sum(nSV)], SV[13*sum(nSV)]
double params[315] = {3.000000,-1.712286,0.625583,0.515424,11.000000,5.000000,6.000000,0.005092,0.000326,0.012137,0.000449,0.000733,0.001451,0.002752,0.000125,0.003122,0.018243,0.001700,0.000188,0.000001,0.000004,0.000047,0.000147,0.000093,0.000064,0.000071,0.000031,0.000048,0.000007,-65.829106,-9.665810,6.153694,-0.218610,-5.776602,2.106955,4.566502,-8.281994,9.398335,-4.282913,3.665591,-0.266174,3.194216,-41.375249,-6.639517,5.601669,4.028826,4.833218,5.051772,14.341838,3.829979,17.051776,2.893184,4.116108,-11.977712,-7.134808,-16.706092,-11.181535,-2.845474,2.894310,8.196255,7.698533,13.775479,1.204401,6.472611,-4.800524,11.140062,-4.283053,-13.042894,-41.158139,-8.361417,-11.339919,-6.045949,-0.251613,7.542158,7.099592,18.809824,-12.379735,-8.531726,21.952025,-14.022475,-6.719045,-0.510650,-27.172310,-23.743737,14.102000,-4.520843,2.868487,3.441899,1.081719,-35.339765,3.343020,8.355735,9.285872,-21.266151,-81.196629,-33.073509,-16.911083,-6.895406,2.413460,-9.872505,4.341071,-13.204426,-12.807570,-6.700658,-3.305710,-0.013614,2.892064,-107.867077,-29.682570,-6.878822,-8.179896,-4.256162,-5.694923,-3.483033,-3.083377,-1.618417,1.700249,4.350387,7.553151,5.097610,-50.641826,-24.092910,-25.446264,9.741331,0.265530,-10.102542,5.119797,-7.459389,-7.552222,10.798159,-22.757993,19.058396,23.181435,-60.617031,-14.021675,-2.722119,-7.052471,9.004108,3.587177,-3.884257,-27.991754,-10.232066,-16.414887,-19.725168,-23.260170,-21.116592,-40.396753,-11.527437,2.161142,-3.108671,5.407871,1.218136,8.554495,0.807229,1.647230,1.683031,10.137166,3.696399,-4.820458,-30.967781,-12.747554,-8.177038,-11.776758,5.729036,-2.657039,20.547255,15.155654,0.653602,-0.349027,11.182327,5.648796,-1.527572,92.116780,-20.678337,-1.420805,-6.911345,-2.543843,-5.427101,-7.351667,-5.430650,1.976882,4.014519,1.959226,11.387634,-2.078462,93.640936,-16.070683,-2.136787,-8.174457,-5.898239,-5.637287,-5.978742,-0.814093,-4.826625,2.189691,8.902860,3.810477,2.985506,94.745478,-16.202428,0.293536,-1.623834,-0.665966,-6.136404,-9.952132,-11.305806,-9.186637,-7.807056,3.219606,6.482687,-0.422554,-1.227499,-27.225071,-22.765168,15.062441,-1.048463,-0.045454,2.525673,0.005546,-15.816602,-2.206216,5.384973,23.367397,-19.914791,2.658329,-28.176922,-24.658675,15.210075,0.228484,3.649591,-9.727719,11.137588,-19.696520,-2.775009,15.838715,11.393136,-16.570833,91.683058,-17.705801,-4.341763,-5.506691,-2.372362,-9.163298,-3.800414,-7.025073,-0.445648,0.187621,-2.496996,-2.192022,4.208384,93.640936,-16.070683,-2.136787,-8.174457,-5.898239,-5.637287,-5.978742,-0.814093,-4.826625,2.189691,8.902860,3.810477,2.985506,-11.102008,3.677210,-14.611706,-8.675806,-12.603719,-30.091680,-7.861101,-5.356623,-13.694594,6.981622,33.143338,21.384173,12.247091,-12.447303,4.252150,-19.306297,-16.950667,-7.810214,-31.418994,-5.311872,-6.890987,-28.671661,-13.142975,1.006019,-5.320192,4.716557,-12.084543,2.082824,-21.373028,-10.760226,-1.827935,-30.998044,-2.130153,-9.770323,-31.684985,-15.932125,1.844835,-5.202901,9.554037,-28.102755,-5.663546,-4.944116,-15.441889,1.107408,-7.952443,10.346169,17.744801,0.506653,2.746986,8.209552,-11.536291,-7.271000};
//double params[115] = {2.000000,1.932132,8.000000,0.000515,0.006323,0.000660,0.001152,0.000676,0.002192,0.009985,0.001533,-35.355695,-7.692733,5.141660,-0.619891,3.896181,12.660981,19.091066,-3.326577,19.909897,4.420263,5.086815,-6.653877,-11.915071,-15.710370,-11.668351,-6.277253,3.592906,11.120969,7.900248,12.542258,3.088589,4.550755,-5.163548,10.723152,-7.158524,-12.264617,-102.949879,-24.924006,4.069507,-11.512653,5.460619,-2.770818,-9.000828,-14.561024,-2.841341,12.755367,10.987513,-2.367949,0.456730,-107.087308,-21.103063,5.476521,-11.617856,-2.104768,8.620920,-0.768019,2.835542,-4.491535,-9.046662,5.706433,6.786542,-9.944530,1.326960,-27.645001,-24.507905,15.470505,1.911930,-0.222875,-4.450545,18.485070,-22.511720,-4.459519,17.198840,18.596572,-14.584219,-63.057745,-23.722306,-17.975628,-1.733671,-12.414242,-11.929527,15.283296,5.921498,3.007624,15.646338,-3.028114,11.979249,18.825294,-37.113535,-11.634445,1.259332,-3.530174,5.405338,-0.241179,8.076281,4.740874,1.271241,0.979516,10.165063,5.497528,-2.464562,-31.943862,-12.979260,-6.840504,-13.806629,1.404362,-10.112451,11.377124,6.319965,-4.949691,-11.994985,0.556126,-5.415726,-4.758403};
//double params[468] = {-2.801985,15.974059,4.238894,11.000000,13.000000,9.000000,0.002410,0.006470,0.001926,0.000115,0.000389,0.001108,0.000043,-0.002751,-0.006844,-0.000350,-0.002516,0.002997,0.002350,0.004646,0.018663,0.003978,0.008587,0.002764,0.001303,0.013619,-0.031400,-0.000604,-0.009344,-0.017559,0.000675,0.001064,0.003815,0.000037,-0.000964,-0.000121,-0.001135,-0.000823,-0.002548,61.590365,-13.222469,-5.062867,-9.812819,-1.722015,-4.824883,-3.566701,-6.888129,-9.480821,-5.958395,-10.386245,-0.982407,0.488661,63.450977,-10.356404,-1.044209,-7.187152,4.043466,-12.082872,-10.762488,-3.901741,-5.939888,4.342498,-4.348480,5.959622,-2.983246,64.713373,-12.788298,-3.744304,-10.665038,5.029900,-0.084736,6.619000,0.734930,-9.162062,0.834437,0.529503,-1.578379,-13.820762,63.454344,-9.360180,-4.099515,-13.264632,8.330636,14.020759,-5.722077,-2.552882,3.773970,-3.798175,-22.042813,-0.464258,-6.185992,65.265765,-10.884526,-2.634921,-7.688335,12.352764,-4.677873,11.314226,-2.204060,5.191229,0.294886,-12.474160,-15.425106,-11.230814,64.672629,-3.580687,5.427263,3.914707,14.573216,4.553897,3.171501,-17.265480,-13.520425,-15.463277,-39.884889,-18.770761,-13.435372,68.600131,-7.168290,-8.621738,-17.424405,1.534222,2.886326,16.805551,11.252015,10.009332,17.582325,-18.742128,-11.139443,-2.949787,52.966957,-6.072293,-5.088559,-0.679754,10.462768,-7.053108,11.584545,6.043158,0.405880,-2.738821,-0.185903,7.934825,-0.421874,77.927169,-22.600416,0.985455,0.460532,5.143546,-8.080464,-3.010006,8.454839,-6.621733,8.862709,-14.115043,6.732725,-3.244006,50.862959,-27.483389,7.546437,-14.411132,-2.224465,-4.294329,-8.558586,-26.379875,24.968323,-3.896807,-15.013604,18.393258,-11.925357,12.217183,-16.250830,-0.719539,-4.881239,0.497940,-2.065853,-11.468019,-33.460374,-19.784721,-17.630693,-14.115609,-7.305567,-10.140663,63.308220,-9.915398,-7.579469,-15.853324,2.685237,-4.026857,1.172787,0.295676,7.602701,-11.273927,12.145375,0.969965,-4.595222,74.446744,7.059732,9.119401,4.545356,10.019590,-15.343648,4.937936,-5.665888,-3.711366,-19.349816,-22.818602,-24.531445,-22.630730,73.711107,9.879732,15.242159,0.265646,0.974810,-6.326477,-0.723008,3.472625,8.577375,-19.913579,-23.412431,-21.615717,-4.326155,96.042381,-6.285927,-3.130859,-5.729674,2.879526,-24.558938,-45.254445,-26.871949,-43.695223,6.063152,39.186779,5.930180,-24.067589,89.209735,-2.130482,5.550984,-11.196436,-6.114549,-33.938188,-39.183069,-16.628889,6.325105,45.241681,16.956474,-0.876020,25.046784,91.877334,-4.856980,1.170056,-8.699826,10.985235,-2.932907,-9.752418,-19.327177,-28.577634,-56.762066,-43.118094,1.778588,10.626914,65.265765,-10.884526,-2.634921,-7.688335,12.352764,-4.677873,11.314226,-2.204060,5.191229,0.294886,-12.474160,-15.425106,-11.230814,65.175051,-6.710717,-3.766296,-0.891402,9.374811,-5.320183,4.194559,-2.598169,3.437323,-3.796254,-15.724785,-17.256954,-27.250604,68.600131,-7.168290,-8.621738,-17.424405,1.534222,2.886326,16.805551,11.252015,10.009332,17.582325,-18.742128,-11.139443,-2.949787,85.151921,-8.423432,-0.126600,-4.964353,4.952463,-10.345211,-3.503568,-10.719160,-22.103656,-2.451807,3.212319,2.852789,-8.938353,85.019010,-5.704974,5.357524,-9.789638,-7.557801,-2.639982,-12.180895,-25.032979,-2.418442,16.002085,-6.477411,-10.663475,-6.846951,86.119782,-8.750336,-2.427487,-7.602594,4.956323,-4.423844,-14.121073,1.093661,-6.985753,1.537051,-1.033587,-12.644818,-9.247704,87.195089,-4.784147,-3.147664,-9.667033,-4.085281,-18.063301,-26.688219,-13.529031,1.397639,-6.250566,-3.173105,-11.840093,-6.006725,52.966957,-6.072293,-5.088559,-0.679754,10.462768,-7.053108,11.584545,6.043158,0.405880,-2.738821,-0.185903,7.934825,-0.421874,73.390050,-13.478429,-0.734193,1.000262,11.971866,0.340783,8.110310,13.316075,-10.421132,-2.466633,-26.598065,0.299427,3.382319,77.927169,-22.600416,0.985455,0.460532,5.143546,-8.080464,-3.010006,8.454839,-6.621733,8.862709,-14.115043,6.732725,-3.244006,56.381619,-31.349216,5.050454,-6.644408,-4.087565,0.368813,-7.690822,-19.584841,22.091329,-20.003020,-17.213155,7.397097,-13.260486,85.000219,-13.426518,-3.121991,-5.904275,-8.945095,-8.393588,-1.410086,-0.273588,-13.375712,-8.730542,-14.214613,7.163581,11.987439,84.984482,-8.397859,1.161650,2.598654,1.518589,-5.852263,-16.130533,-13.060529,-12.535287,-6.162758,-18.779454,-6.827954,-8.353096,86.129777,-10.851503,-6.328806,-1.107767,2.934941,-8.905195,2.930587,11.418645,-11.208516,-3.760179,6.557685,14.739347,5.746698,93.563806,-11.560037,-13.674477,10.428453,14.417351,-20.382345,1.976643,3.984589,-9.122714,-6.000877,-20.797973,-6.129928,-4.212520,85.508391,-9.527477,3.880671,-4.090761,3.006469,1.325592,7.894287,2.922602,5.159787,9.116659,-10.857001,-2.289778,-8.404323};
int main()
{
  int C = 1;

  DSP_Init();

  int mm, bb, ll;
  int cc = 0;

  twiddleFactors();

  // main stalls here, interrupts drive operation
  while(1) {
      if(startflag){
    	  // Remove bias (DC offset)
    	  avg = 0;
          for(mm=0; mm<M; mm++){
        	  avg = avg + X[mm];
          }
          // Measure the Magnitude of the input to find starting point
          avg = avg/M;
    	  magnitude = 0;
          for(mm=0; mm<M; mm++){
        	  magnitude = magnitude + abs(X[mm]-avg);
          }
          if(magnitude>30000){
        	  // N-blocks
        	  for(bb=0;bb<N;bb++){
        		  for(ll=0; ll<M; ll++){
        			  B[ll].real = X[10*bb+ll];
        			  B[ll].imag = 0;
        		  }
        		  // (P5). FFT: B is input and output, w is twiddle factors
                  fft(B, M, w);
				  // (P5). Features for SVM: MFCC
                  for(mm=0; mm<M; mm++){
                      double re = (double) B[mm].real;
                      double im = (double) B[mm].imag;
                      spectrum[mm] = sqrt(re*re + im*im);
//                      spectrum[mm] = (double) B[mm].real;
                  }
                  int fs = GetSampleFreq();
                  printf("\n[");
                  for (coeff = 0; coeff < D; coeff++) {
                      mfcc_result[coeff] = GetCoefficient(spectrum, fs, NUMFILTERS, M, coeff);
                      printf("%f, ", mfcc_result[coeff]);
                  }
                  printf("]");
                  cc++;
        	  }

        	  // training
        	  if(cc<C) {
        		  printf("Data Collection: %d blocks\n", cc);
        	  } else {
        		  if(training) {
//        			  printf("\nTraining Starts\n");
//        			  // SVM initialization
//        			  // Initialize SVM model
//        			  initialization();
//
//        			  if(cross_validation){
//        				  do_cross_validation();
//        			  } else {
//						  model = svm_read_model(params, K, &param);
//        			  }
        			  training = 0;
//        		  } else {
        			  // classification
        			  printf("\nClassifying..\n");
        			  double predict_label = read_predict(mfcc_result);
        			  double label = predict_label + 1.0;
        			  printf("\nPredicted label: %g\n", label);
        		  }
        		  cc = 0;
        	  }
          }
          startflag = 0;
      }
  }
}

void twiddleFactors()
{
	int ii;
  	// Gets twiddle factor
	for(ii=0; ii<M; ii++){
		w[ii].real = cos((float)ii/(float)M*PI);
		w[ii].imag = sin((float)ii/(float)M*PI);
	}
}

//void do_cross_validation()
//{
//	int i;
//	int total_correct = 0;
//	double total_error = 0;
//	double sumv = 0, sumy = 0, sumvv = 0, sumyy = 0, sumvy = 0;
//	double target[3];
//
//	svm_cross_validation(&prob,&param,nr_fold,target);
//	if(param.svm_type == EPSILON_SVR ||
//	   param.svm_type == NU_SVR)
//	{
//		for(i=0;i<prob.l;i++)
//		{
//			double y = prob.y[i];
//			double v = target[i];
//			total_error += (v-y)*(v-y);
//			sumv += v;
//			sumy += y;
//			sumvv += v*v;
//			sumyy += y*y;
//			sumvy += v*y;
//		}
//		printf("Cross Validation Mean squared error = %g\n",total_error/prob.l);
//		printf("Cross Validation Squared correlation coefficient = %g\n",
//			((prob.l*sumvy-sumv*sumy)*(prob.l*sumvy-sumv*sumy))/
//			((prob.l*sumvv-sumv*sumv)*(prob.l*sumyy-sumy*sumy))
//			);
//	}
//	else
//	{
//		for(i=0;i<prob.l;i++)
//			if(target[i] == prob.y[i])
//				++total_correct;
//		printf("Cross Validation Accuracy = %g%%\n",100.0*total_correct/prob.l);
//	}
//	free(target);
//}

//void initialization()
//{
//	// default values
//	param.svm_type = C_SVC;
//	param.kernel_type = RBF;
//	param.degree = 3;
//	param.gamma = 0;	// 1/num_features
//	param.coef0 = 0;
//	param.nu = 0.5;
//	param.cache_size = 100;
//	param.C = 1;
//	param.eps = 1e-3;
//	param.p = 0.1;
//	param.shrinking = 1;
//	param.probability = 0;
//	param.nr_weight = 0;
//	param.weight_label = NULL;
//	param.weight = NULL;
//	cross_validation = 0;
//}

//// read in a problem (in svmlight format)
//void read_problem(double *featureVector, int *label, int N, int D)
//{
//	int i,j;
//
//	prob.l = N;
//	prob.y = Malloc(double,prob.l);
//	prob.x = Malloc(struct svm_node *,prob.l);
//	x_space = Malloc(struct svm_node,N);
//
//	for(i=0;i<prob.l;i++)
//	{
//		prob.x[i] = &x_space[j];
//		prob.y[i] = label[i];
//
//		for(j=0;j<D;j++)
//		{
//			x_space[j].index = j;
//			x_space[j].value = featureVector[i*D+j];
//		}
//
//		x_space[j++].index = -1;
//	}
//
//}


//void predict(double *featureVector)
//{
//	int correct = 0;
//	int total = 0;
//	double error = 0;
//	double sump = 0, sumt = 0, sumpp = 0, sumtt = 0, sumpt = 0;
//
//	int svm_type=svm_get_svm_type(model);
//	int nr_class=svm_get_nr_class(model);
//	double *prob_estimates=NULL;
//	int i,j;
//
//	if(predict_probability)
//	{
//		if (svm_type==NU_SVR || svm_type==EPSILON_SVR)
//			printf("Prob. model for test data: target value = predicted value + z,\nz: Laplace distribution e^(-|z|/sigma)/(2sigma),sigma=%g\n",svm_get_svr_probability(model));
//		else
//		{
//			int *labels=(int *) malloc(nr_class*sizeof(int));
//			svm_get_labels(model,labels);
//			prob_estimates = (double *) malloc(nr_class*sizeof(double));
//			free(labels);
//		}
//	}
//
//	double target_label, predict_label;
//
////	for(i=0;i<N;i++)
////	{
//		int target_labels[CLASSES];
//		svm_get_labels(model, target_labels);
////
////		for(j=0;j<D;j++)
////		{
////			x[j].index = j;
////			x[j].value = featureVector[i*D+j];
////		}
////		x[i].index = -1;
//
////		if (predict_probability && (svm_type==C_SVC || svm_type==NU_SVC))
////		{
////			predict_label = svm_predict_probability(model,x,prob_estimates);
////			int c;
////			for(c=0;c<nr_class;c++) {
////				double label = c + 1.0;
////				printf("probability estimate for label %g: %g\n", label, prob_estimates[c]);
////			}
////		}
////		else
////		{
////			predict_label = svm_predict(model,x);
////		}
//
//	for (j = 0; j < D; j++)
//	{
//		x[j].index = j;
//		x[j].value = featureVector[j];
//	}
//
//	predict_label = svm_predict(params, K, x);
//	double label = predict_label + 1.0;
//	printf("\nPredicted label: %g\n", label);
//
//		int k;
//		for(k=0; k < K; k++) {
//			target_label = (double) target_labels[k];
//			if(predict_label == target_label) {
//				++correct;
//			}
//			error += (predict_label-target_label)*(predict_label-target_label);
//			sump += predict_label;
//			sumt += target_label;
//			sumpp += predict_label*predict_label;
//			sumtt += target_label*target_label;
//			sumpt += predict_label*target_label;
//			++total;
//		}
////	}
////	if (svm_type==NU_SVR || svm_type==EPSILON_SVR)
////	{
////		printf("Mean squared error = %g (regression)\n",error/total);
////		printf("Squared correlation coefficient = %g (regression)\n",
////			((total*sumpt-sump*sumt)*(total*sumpt-sump*sumt))/
////			((total*sumpp-sump*sump)*(total*sumtt-sumt*sumt))
////			);
////	}
////	else {
////		double acc = ((double) correct)/((double) total)*100.0;
////		printf("Accuracy = %g (classification)\n",acc);
////	}
//
//	if(predict_probability)
//		free(prob_estimates);
//}

double read_predict(double *x) {
    int i = 0;
    int nr_class = params[i++];
    double rho[CLASSES];
    double nSV[CLASSES];
    double labels[CLASSES];
    int k, j, n;

    for(k = 0; k < nr_class; k++) {
        rho[k] = params[i++];
        labels[k] = k;
    }

    double length = 0;
    for(k = 0; k < nr_class; k++) {
        nSV[k] = params[i];
        length += params[i++];
    }


	double *sv_coef = Malloc(double *,CLASSES);
	for(k = 0; k < CLASSES; k++) {
		sv_coef[k] = Malloc(double,length);
	}

	for(k = 0; k < nr_class; k++) {
		for(j = 0; j < nSV[k]; j++){
			sv_coef[k][j] = params[i++];
		}
	}


    double *SV = Malloc(double *, length);
	for(n = 0; n < length; n++) {
		SV[n] = Malloc(double,FEATURES);
	}

	for(n = 0; n < length; n++) {
		for(j = 0; j < FEATURES; j++) {
			SV[n][j] = params[i++];
        }
    }

    double sums[CLASSES];
	for (k = 0; k < CLASSES; k++) {
		double bk = rho[k];
		double sum = 0;
		for(n = 0; n < nSV[k]; n++) {
			// xi = SV[n]
			double ai = sv_coef[k][n];
			double dp = 0.0;
		    for(j = 0; j < FEATURES; j++) {
				dp += SV[n][j]*x[j];
			}
			sum += ai*dp;
		}
		sums[k] = sum + bk;
	}

	printf("\nsums =[");
	double label = -1.0;
	for(k = 0; k < CLASSES; k++) {
		printf("%f, ", sums[k]);
		if(sums[k] > 0)
			label = labels[k];
	}
	printf("]");

    return label;
}
